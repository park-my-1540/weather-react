{"version":3,"sources":["module/LatlngProvider.js","module/useAsync.js","component/MainComp.js","component/SubComp.js","component/Marker.js","component/MapComp.js","component/ModalComp.js","containers/WeatherContainer.js","component/loadingComp.js","module/Weather.js","App.js","index.js"],"names":["initalState","lat","lng","flag","city","reducer","state","action","type","LatlngStateContext","createContext","LatlngDispatchContext","LatlngProvider","children","useReducer","dispatch","Provider","value","useLatlngState","useContext","useLatlngDispatch","loading","data","error","lading","Error","useAsync","callback","deps","fetchData","a","useEffect","MainComp","mainData","today","Date","year","getFullYear","month","getMonth","date","getDate","todayLabel","getDay","calLabel","className","country","main","temp","SubComp","setModal","desc","humidity","wind","forecast","map","index","max","min","onClick","Marker","props","name","scope","style","cursor","title","React","memo","MapComp","refetch","useState","center","setCenter","clickedLatLng","setClickedLatLng","e","preventDefault","height","width","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","bootstrapURLKeys","key","id","pos","place","changeLoc","ModalComp","show","Fragment","href","WeatherContainer","modal","loadingComp","class","Weather","WEATHER_API_KEY","latlng_state","latlng_dispatch","stateLat","useRef","stateLng","stateFlag","init","getLongAndLat","tempMax","tempMin","getMax","Math","getMin","mainArray","weekArray","maxminArray","Promise","resolve","reject","GeocodeFunc","Geocode","setApiKey","setLanguage","setRegion","enableDebug","fromLatLng","then","response","jbString","results","formatted_address","split","stateName","length","current","cnt","url","url2","axios","all","get","spread","response1","response2","list","forEach","push","round","temp_max","temp_min","weather","sys","speed","description","console","log","message","d","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ea4deb5c.chunk.js","sourcesContent":["// useLatLng :  클릭한 위경도 가져오는\r\n// 초기값, 조회\r\nimport React, { useReducer, useContext, createContext } from \"react\";\r\n\r\n//초기값은...세팅\r\nconst initalState = {\r\n  lat: 37,\r\n  lng: 127,\r\n  flag: \"initState\",\r\n  city: \"where\"\r\n};\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CHANGE\": {\r\n      return {\r\n        lat: action.lat,\r\n        lng: action.lng,\r\n        flag: \"change\"\r\n      };\r\n    }\r\n    case \"INIT\": {\r\n      return {\r\n        lat: action.lat,\r\n        lng: action.lng,\r\n        flag: \"init\"\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst LatlngStateContext = createContext();\r\nconst LatlngDispatchContext = createContext();\r\n\r\nexport function LatlngProvider({ children }) {\r\n  // init();\r\n  const [state, dispatch] = useReducer(reducer, initalState);\r\n  return (\r\n    <LatlngStateContext.Provider value={state}>\r\n      <LatlngDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </LatlngDispatchContext.Provider>\r\n    </LatlngStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useLatlngState() {\r\n  return useContext(LatlngStateContext);\r\n}\r\nexport function useLatlngDispatch() {\r\n  return useContext(LatlngDispatchContext);\r\n}\r\n","//로딩 값, 데이터 관리, 에러, useEffect 설정\r\nimport { useReducer, useEffect } from \"react\";\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"LOADING\":\r\n      return {\r\n        loading: true,\r\n        data: null,\r\n        error: null\r\n      };\r\n    case \"SUCCESS\":\r\n      return {\r\n        lading: false,\r\n        data: action.data,\r\n        error: null\r\n      };\r\n    case \"ERROR\":\r\n      return {\r\n        loading: false,\r\n        data: null,\r\n        error: action.error\r\n      };\r\n    default: {\r\n      throw new Error(\"error 수고\");\r\n    }\r\n  }\r\n}\r\nfunction useAsync(callback, deps = []) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    loading: false,\r\n    data: null,\r\n    error: false\r\n  });\r\n  const fetchData = async () => {\r\n    dispatch({ type: \"LOADING\" });\r\n    try {\r\n      const data = await callback();\r\n      dispatch({ type: \"SUCCESS\", data });\r\n    } catch (e) {\r\n      dispatch({ type: \"ERROR\", error: e });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, deps);\r\n  return [state, fetchData];\r\n}\r\nexport default useAsync;\r\n","import React from \"react\";\r\nimport { FiCompass, FiSun, FiCloud, FiCloudRain } from \"react-icons/fi\";\r\n\r\nexport default function MainComp({ mainData }) {\r\n  let today = new Date();\r\n  let year = today.getFullYear(); // 년도\r\n  let month = today.getMonth() + 1; // 월\r\n  let date = today.getDate(); // 날짜\r\n  let day = today.getDay(); // 요일\r\n  var week = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wensday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  ];\r\n  var Calender = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"July\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Nov\",\r\n    \"Dec\"\r\n  ];\r\n  var todayLabel = week[day]; //요일\r\n  var calLabel = Calender[month - 1]; //월\r\n  return (\r\n    <div className=\"Main_Box\">\r\n      <div className=\"inner\">\r\n        <div className=\"title_wrap\">\r\n          <p className=\"dayWeek\">{todayLabel}</p>\r\n          <div className=\"day\">\r\n            <p>\r\n              {date} {calLabel} {year}\r\n            </p>\r\n            <p>\r\n              <FiCompass />\r\n              <span>{mainData.state}</span>\r\n              <span>, {mainData.country}</span>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {/* title_wrap */}\r\n        <div className=\"content_wrap\">\r\n          {mainData.main === \"Sunny\" && <FiSun />}\r\n          {mainData.main === \"Clear\" && <FiCloud />}\r\n          {mainData.main === \"Rain\" && <FiCloudRain />}\r\n          <p className=\"main_temp\">{mainData.temp}°C</p>\r\n          <p className=\"main_desc\">{mainData.main}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FiCompass, FiUmbrella, FiSun, FiCloud } from \"react-icons/fi\";\r\nexport default function SubComp({ mainData, setModal }) {\r\n  return (\r\n    <div className=\"Sub_Box\">\r\n      <div className=\"sub_desc_box\">\r\n        <dl>\r\n          <dt>DESCRIPTION</dt>\r\n          <dd>{mainData.desc}</dd>\r\n        </dl>\r\n        <dl>\r\n          <dt>HUMIDITY</dt>\r\n          <dd>{mainData.humidity} %</dd>\r\n        </dl>\r\n        <dl>\r\n          <dt>WIND</dt>\r\n          <dd>{mainData.wind} km/h</dd>\r\n        </dl>\r\n      </div>\r\n      {/* sub_desc_box */}\r\n      <div className=\"weather_list_wrap\">\r\n        <ul>\r\n          {mainData.forecast.map((data, index) => (\r\n            <li key={index}>\r\n              {data.main === \"Sunny\" && <FiSun />}\r\n              {data.main === \"Clear\" && <FiCloud />}\r\n              {data.main === \"Clouds\" && <FiCloud />}\r\n              {data.main === \"Rain\" && <FiUmbrella />}\r\n              <p className=\"\">{data.main}</p>\r\n              <p className=\"\">{data.temp}</p>\r\n              <p className=\"\">\r\n                {data.max} / {data.min}\r\n              </p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {/* weather_list_wrap */}\r\n      <button type=\"button\" className=\"btn\" onClick={() => setModal(\"open\")}>\r\n        <FiCompass className=\"test\" />\r\n        Change location\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo } from \"react\";\r\nimport \"../sass/marker.scss\";\r\nimport { IoBookmarkSharp, IoLocationSharp } from \"react-icons/io5\";\r\n\r\nconst Marker = (props) => {\r\n  const { name, scope } = props;\r\n  return (\r\n    <div className=\"marker\" style={{ cursor: \"pointer\" }} title={name}>\r\n      {scope === \"current\" ? (\r\n        <IoLocationSharp value={name} />\r\n      ) : (\r\n        <IoBookmarkSharp value={name} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Marker);\r\n","import React, { useState } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport Geocode from \"react-geocode\";\r\nimport Marker from \"./Marker\";\r\nimport { useLatlngDispatch, useLatlngState } from \"../module/LatlngProvider\";\r\nimport { IoReturnDownBackSharp } from \"react-icons/io5\";\r\n\r\nexport default function MapComp({ refetch }) {\r\n  const dispatch = useLatlngDispatch();\r\n  const state = useLatlngState();\r\n  const [center, setCenter] = useState(state); // 위치 초기화\r\n  const [clickedLatLng, setClickedLatLng] = useState(center);\r\n  //placeList : 서울, 전주, 부산, 광주 마크\r\n  const placeList = [\r\n    {\r\n      id: 1,\r\n      name: \"seoul\",\r\n      pos: { lat: 37.55138986009033, lng: 126.98588446406256 }\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"jeonju\",\r\n      pos: { lat: 35.82163848334147, lng: 127.10523012135582 }\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"busan\",\r\n      pos: { lat: 35.16419348131997, lng: 129.04981019948082 }\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"gwangju\",\r\n      pos: { lat: 35.12929531292171, lng: 126.83248992982925 }\r\n    }\r\n  ];\r\n  const handleApiLoaded = ({ map, maps }) => {\r\n    // 현재 위치 (위경도 가져오기) 지도 center 로 세팅\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setCenter({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude\r\n        });\r\n      },\r\n      () => {}\r\n    );\r\n  };\r\n  async function changeLoc(e) {\r\n    e.preventDefault();\r\n    await dispatch({\r\n      type: \"CHANGE\",\r\n      lat: clickedLatLng.lat,\r\n      lng: clickedLatLng.lng,\r\n      flag: \"change\"\r\n    });\r\n    refetch();\r\n  }\r\n  return (\r\n    <div style={{ height: \"100%\", width: \"100%\" }}>\r\n      <GoogleMapReact\r\n        // ref={this.mapRef}\r\n        center={center}\r\n        defaultZoom={11}\r\n        // onReady={this.autoCenterMap}\r\n        yesIWantToUseGoogleMapApiInternals\r\n        onClick={(e) => {\r\n          setClickedLatLng({\r\n            lat: e.lat,\r\n            lng: e.lng\r\n          });\r\n        }}\r\n        onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\r\n        bootstrapURLKeys={{\r\n          key: \"AIzaSyAtpI23q-I9qXLrdfPVk7O2wCTlWHWaseo\",\r\n        }}\r\n      >\r\n        <Marker lat={center.lat} lng={center.lng} scope=\"current\" />\r\n        {placeList.map((place) => (\r\n          <Marker\r\n            lat={place.pos.lat}\r\n            lng={place.pos.lng}\r\n            name={place.name}\r\n            scope=\"sub\"\r\n          />\r\n        ))}\r\n      </GoogleMapReact>\r\n      <div className=\"cont\">\r\n        {clickedLatLng && (\r\n          <span>\r\n            해당 위치 조회<br/>: {clickedLatLng.lat}, {clickedLatLng.lng}\r\n          </span>\r\n        )}\r\n        <button type=\"button\" onClick={(e) => changeLoc(e)}>\r\n          선택한 위치로 변경\r\n          <IoReturnDownBackSharp />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport MapComp from \"../component/MapComp\";\r\nimport { IoCloseSharp } from \"react-icons/io5\";\r\nexport default function ModalComp({ show, setModal, refetch }) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"popup_container\">\r\n        <div className=\"popup_inner\">\r\n          <a href=\"#none\" className=\"close\" onClick={() => setModal(\"close\")}>\r\n            <IoCloseSharp />\r\n          </a>\r\n          <div className=\"pop_cont\">\r\n            <div\r\n              style={{\r\n                height: 500\r\n              }}\r\n            >\r\n              <MapComp refetch={refetch} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport MainComp from \"../component/MainComp\";\r\nimport SubComp from \"../component/SubComp\";\r\nimport Modal from \"../component/ModalComp\";\r\n\r\nexport default function WeatherContainer({ data, refetch }) {\r\n  const [modal, setModal] = useState(\"close\");\r\n  return (\r\n    <div className=\"container\">\r\n      <MainComp mainData={data} />\r\n      <SubComp mainData={data} modal={modal} setModal={setModal} />\r\n      {modal === \"open\" && (\r\n        <Modal modal={modal} setModal={setModal} refetch={refetch} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../sass/loading.scss\";\r\n\r\nconst loadingComp = () => {\r\n  return (\r\n    <>\r\n      <div class=\"container\">\r\n        <div class=\"loader\">\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--dot\"></div>\r\n          <div class=\"loader--text\"></div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(loadingComp);\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport useAsync from \"../module/useAsync\";\r\nimport WeatherContainer from \"../containers/WeatherContainer\";\r\n//날씨 데이터를 가져오는 State-useAsync로 관리\r\nimport { useLatlngState, useLatlngDispatch } from \"../module/LatlngProvider\";\r\nimport Geocode from \"react-geocode\";\r\nimport Loading from \"../component/loadingComp\";\r\nfunction Weather() {\r\n  const WEATHER_API_KEY = \"ffc012cd698a9beca9d896a3efcc1576\";\r\n  const GEOCODE_API_KEY = \"AIzaSyAtpI23q-I9qXLrdfPVk7O2wCTlWHWaseo\";\r\n  // 위,경도 context api -> state,dispatcg\r\n  const latlng_state = useLatlngState();\r\n  const latlng_dispatch = useLatlngDispatch();\r\n\r\n  var stateLat = useRef(latlng_state.lat);\r\n  var stateLng = useRef(latlng_state.lng);\r\n  var stateFlag = useRef(latlng_state.flag);\r\n\r\n  //state 값들 조회\r\n  var { lat, lng, flag } = latlng_state;\r\n  /**초기화 : 현재 위,경도로 초기화 */\r\n  const init = async () => {\r\n    let position = await getLongAndLat(),\r\n      { coords } = position;\r\n    latlng_dispatch({\r\n      type: \"INIT\",\r\n      lat: coords.latitude,\r\n      lng: coords.longitude\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, []);\r\n\r\n  /***** 최대, 최저온도 구하기 ****/\r\n  var tempMax = [];\r\n  var tempMin = [];\r\n  var max, min;\r\n  //tempMax 변수를 빼고 함수 파라미터로 써보자.\r\n  function getMax() {\r\n    max = Math.max(...tempMax);\r\n    return max;\r\n  }\r\n  function getMin() {\r\n    min = Math.min(...tempMin);\r\n    return min;\r\n  }\r\n\r\n  /***** 배열 선언 ****/\r\n  let mainArray = [];\r\n  let weekArray = [];\r\n  let maxminArray = {\r\n    min: [],\r\n    max: []\r\n  };\r\n\r\n  /** Promise 약속하기 */\r\n  /**현재 위경도 구하기 */\r\n  function getLongAndLat() {\r\n    return new Promise((resolve, reject) =>\r\n      navigator.geolocation.getCurrentPosition(resolve, reject)\r\n    );\r\n  }\r\n  /**** 주어진 위경도로 해당 도시이름 구하기 ****/\r\n  function GeocodeFunc(latitude, longitude) {\r\n    return new Promise((resolve, reject) => {\r\n      Geocode.setApiKey(GEOCODE_API_KEY);\r\n      Geocode.setLanguage(\"en\");\r\n      Geocode.setRegion(\"en\");\r\n      Geocode.enableDebug();\r\n      Geocode.fromLatLng(latitude, longitude).then((response) => {\r\n        var jbString = response.results[0].formatted_address.split(\",\");\r\n        let stateName =\r\n          jbString[jbString.length - 3] + \" , \" + jbString[jbString.length - 2];\r\n        resolve(stateName); //얘가 꼭 있어야 되\r\n        return stateName;\r\n      });\r\n    });\r\n  }\r\n  /** //Promise 약속 끝 */\r\n  /**\r\n   * 조회한 위경도와 도시이름 그리고 날씨 데이터를 mainArray에 넣기.\r\n   */\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * 이렇게 한 이유는 setstate가 기존 상태를 변경하는 대신 새 상태를 반환하는 비동기 함수이기 때문에\r\n     * 암튼 즉시 반영이 되지 않는다. 그래서 useEffect에 즉시 바뀔때마다 useRef로 넣어놨다.\r\n     */\r\n\r\n    stateLat.current = latlng_state.lat;\r\n    stateLng.current = latlng_state.lng;\r\n    stateFlag.current = latlng_state.flag;\r\n  }, [latlng_state]);\r\n\r\n  const getData = async () => {\r\n    try {\r\n      let cnt = -1; // 4시간 마다 하루가 바뀌므로 카운트 하기위해 있는 변수\r\n      let position = await getLongAndLat();\r\n      let { coords } = position;\r\n      /**\r\n       * !change : 초기 값일때만 현재위치,\r\n       * change : 위치 변경 했을시에 값 state 로 조회\r\n       */\r\n      let latitude =\r\n        stateFlag.current === \"change\" ? stateLat.current : coords.latitude;\r\n      let longitude =\r\n        stateFlag.current === \"change\" ? stateLng.current : coords.longitude;\r\n\r\n      let stateName = await GeocodeFunc(latitude, longitude);\r\n\r\n      //초기화\r\n      mainArray = [];\r\n      weekArray = [];\r\n      // var tempMax = [];\r\n      // var tempMin = [];\r\n      // var max, min; let 통일해보자.\r\n      /*\r\n          url : 현재날씨\r\n          url2 : 예보날씨\r\n        */\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&exclude=daily&appid=${WEATHER_API_KEY}&units=metric`;\r\n      let url2 = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&exclude=daily&appid=${WEATHER_API_KEY}&cnt=20&units=metric`;\r\n\r\n      //const response = await axios.all([axios.get(url), axios.get(url2)]);\r\n      // const response1 = response[0].data;\r\n      //const response2 = response[1].data.list;\r\n      await axios.all([axios.get(url), axios.get(url2)]).then(\r\n        axios.spread(function (...response) {\r\n          const response1 = response[0].data;\r\n          const response2 = response[1].data.list;\r\n\r\n          response2.forEach(function (data, index) {\r\n            /**\r\n             * tempMax : 0~4 -> 하루치 max 온도 배열에 넣고 그날 하루의 최대온도 구함\r\n             * tempMin : 0~4 -> 하루치 min 온도 배열에 넣고 그날 하루의 최저온도 구함\r\n             */\r\n            tempMax.push(Math.round(data.main.temp_max));\r\n            tempMin.push(Math.round(data.main.temp_min));\r\n            /**\r\n             * 배열이 4n이 되면 하루치 이므로 계산\r\n             */\r\n            if (index % 4 === 0) {\r\n              cnt++;\r\n              maxminArray.min.push(getMin());\r\n              maxminArray.max.push(getMax());\r\n              //하루치 계산후 초기화\r\n              tempMin = [];\r\n              tempMax = [];\r\n\r\n              /**\r\n               * weekArray 배열 : 하루치 날씨 정보 * 4\r\n               * main : summary\r\n               * tmp : 평균온도\r\n               * max : 최대온도\r\n               * min : 최저온도\r\n               */\r\n              // 최상단에는 이름을 붙여주지않는편 _ 황희대리님\r\n\r\n              weekArray.push({\r\n                main: data.weather[0].main,\r\n                temp: Math.round(data.main.temp),\r\n                max: Math.round(maxminArray.max[cnt]),\r\n                min: Math.round(maxminArray.min[cnt])\r\n              });\r\n            }\r\n          });\r\n          /**\r\n           * mainArray : 현재 날씨 + 4일치 날씨\r\n           * temp : 현재온도\r\n           * name : 현재도시\r\n           * main : 현재날씨\r\n           * country : 현재국가\r\n           * wind : 바람세기\r\n           * humidity : 습도\r\n           * desc : 현재날씨 desc\r\n           * forecast : 4일치 날씨정보\r\n           */\r\n          // mainArray.push({...response1})\r\n          mainArray.push({\r\n            temp: Math.round(response1.main.temp),\r\n            name: response1.name,\r\n            main: response1.weather[0].main,\r\n            country: response1.sys.country,\r\n            wind: response1.wind.speed,\r\n            humidity: response1.main.humidity,\r\n            desc: response1.weather[0].description,\r\n            forecast: weekArray,\r\n            state: stateName\r\n          });\r\n        })\r\n      );\r\n    } catch (e) {\r\n      console.log(\"Error: \" + e.message);\r\n    }\r\n    return mainArray;\r\n  };\r\n\r\n  /******* 날씨 데이터 컨테이너 컴포넌트에 전달  *******/\r\n  const [state, refetch] = useAsync(getData, []);\r\n  const { loading, data, error } = state;\r\n\r\n  if (loading) return <Loading />;\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!data) return null;\r\n  return data.map((d, index) => (\r\n    <WeatherContainer data={d} refetch={refetch} key={index} />\r\n  ));\r\n}\r\nexport default React.memo(Weather);\r\n","import React from \"react\";\n// import Weather from \"./module/Weather\";\nimport \"./sass/common.scss\";\nimport { LatlngProvider } from \"./module/LatlngProvider\";\nimport Weather from \"./module/Weather\";\n\nexport default function App() {\n  return (\n    <>\n      <LatlngProvider>\n        <div className=\"App\">\n          <Weather />\n        </div>\n      </LatlngProvider>\n    </>\n  );\n}\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}